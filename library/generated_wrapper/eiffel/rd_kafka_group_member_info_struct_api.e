note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RD_KAFKA_GROUP_MEMBER_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	member_id:  detachable C_STRING
			-- Access member `member_id`
		require
			exists: exists
		do
			if attached c_member_id (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_member_id (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_member_id (a_value: C_STRING) 
			-- Change the value of member `member_id` to `a_value`.
		require
			exists: exists
		do
			set_c_member_id (item, a_value.item )
		end

	client_id:  detachable C_STRING
			-- Access member `client_id`
		require
			exists: exists
		do
			if attached c_client_id (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_client_id (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_client_id (a_value: C_STRING) 
			-- Change the value of member `client_id` to `a_value`.
		require
			exists: exists
		do
			set_c_client_id (item, a_value.item )
		end

	client_host:  detachable C_STRING
			-- Access member `client_host`
		require
			exists: exists
		do
			if attached c_client_host (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_client_host (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_client_host (a_value: C_STRING) 
			-- Change the value of member `client_host` to `a_value`.
		require
			exists: exists
		do
			set_c_client_host (item, a_value.item )
		end

	member_metadata: POINTER
			-- Access member `member_metadata`
		require
			exists: exists
		do
			Result := c_member_metadata (item)
		ensure
			result_correct: Result = c_member_metadata (item)
		end

	set_member_metadata (a_value: POINTER) 
			-- Change the value of member `member_metadata` to `a_value`.
		require
			exists: exists
		do
			set_c_member_metadata (item, a_value)
		ensure
			member_metadata_set: a_value = member_metadata
		end

	member_metadata_size: INTEGER
			-- Access member `member_metadata_size`
		require
			exists: exists
		do
			Result := c_member_metadata_size (item)
		ensure
			result_correct: Result = c_member_metadata_size (item)
		end

	set_member_metadata_size (a_value: INTEGER) 
			-- Change the value of member `member_metadata_size` to `a_value`.
		require
			exists: exists
		do
			set_c_member_metadata_size (item, a_value)
		ensure
			member_metadata_size_set: a_value = member_metadata_size
		end

	member_assignment: POINTER
			-- Access member `member_assignment`
		require
			exists: exists
		do
			Result := c_member_assignment (item)
		ensure
			result_correct: Result = c_member_assignment (item)
		end

	set_member_assignment (a_value: POINTER) 
			-- Change the value of member `member_assignment` to `a_value`.
		require
			exists: exists
		do
			set_c_member_assignment (item, a_value)
		ensure
			member_assignment_set: a_value = member_assignment
		end

	member_assignment_size: INTEGER
			-- Access member `member_assignment_size`
		require
			exists: exists
		do
			Result := c_member_assignment_size (item)
		ensure
			result_correct: Result = c_member_assignment_size (item)
		end

	set_member_assignment_size (a_value: INTEGER) 
			-- Change the value of member `member_assignment_size` to `a_value`.
		require
			exists: exists
		do
			set_c_member_assignment_size (item, a_value)
		ensure
			member_assignment_size_set: a_value = member_assignment_size
		end

feature {NONE} -- Implementation wrapper for struct struct rd_kafka_group_member_info

	sizeof_external: INTEGER 
		external
			"C inline use <rdkafka.h>"
		alias
			"sizeof(struct rd_kafka_group_member_info)"
		end

	c_member_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_id
			]"
		end

	set_c_member_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_id =  (char*)$a_value
			]"
		ensure
			member_id_set: a_value = c_member_id (an_item)
		end

	c_client_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->client_id
			]"
		end

	set_c_client_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->client_id =  (char*)$a_value
			]"
		ensure
			client_id_set: a_value = c_client_id (an_item)
		end

	c_client_host (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->client_host
			]"
		end

	set_c_client_host (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->client_host =  (char*)$a_value
			]"
		ensure
			client_host_set: a_value = c_client_host (an_item)
		end

	c_member_metadata (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_metadata
			]"
		end

	set_c_member_metadata (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_metadata =  (void*)$a_value
			]"
		ensure
			member_metadata_set: a_value = c_member_metadata (an_item)
		end

	c_member_metadata_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_metadata_size
			]"
		end

	set_c_member_metadata_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_metadata_size =  (int)$a_value
			]"
		ensure
			member_metadata_size_set: a_value = c_member_metadata_size (an_item)
		end

	c_member_assignment (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_assignment
			]"
		end

	set_c_member_assignment (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_assignment =  (void*)$a_value
			]"
		ensure
			member_assignment_set: a_value = c_member_assignment (an_item)
		end

	c_member_assignment_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_assignment_size
			]"
		end

	set_c_member_assignment_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_group_member_info*)$an_item)->member_assignment_size =  (int)$a_value
			]"
		ensure
			member_assignment_size_set: a_value = c_member_assignment_size (an_item)
		end

end
