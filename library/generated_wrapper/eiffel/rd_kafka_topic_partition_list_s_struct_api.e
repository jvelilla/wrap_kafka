note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RD_KAFKA_TOPIC_PARTITION_LIST_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	cnt: INTEGER
			-- Access member `cnt`
		require
			exists: exists
		do
			Result := c_cnt (item)
		ensure
			result_correct: Result = c_cnt (item)
		end

	set_cnt (a_value: INTEGER) 
			-- Change the value of member `cnt` to `a_value`.
		require
			exists: exists
		do
			set_c_cnt (item, a_value)
		ensure
			cnt_set: a_value = cnt
		end

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

	elems: detachable RD_KAFKA_TOPIC_PARTITION_S_STRUCT_API 
			-- Access member `elems`
		require
			exists: exists
		do
			if attached c_elems (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_elems (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_elems (item) 
		end

	set_elems (a_value: RD_KAFKA_TOPIC_PARTITION_S_STRUCT_API) 
			-- Set member `elems`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_elems (item, a_value.item)
		ensure
			elems_set: attached elems as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct rd_kafka_topic_partition_list_s

	sizeof_external: INTEGER 
		external
			"C inline use <rdkafka.h>"
		alias
			"sizeof(struct rd_kafka_topic_partition_list_s)"
		end

	c_cnt (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->cnt
			]"
		end

	set_c_cnt (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->cnt =  (int)$a_value
			]"
		ensure
			cnt_set: a_value = c_cnt (an_item)
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->size =  (int)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

	c_elems (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->elems
			]"
		end

	set_c_elems (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_topic_partition_list_s*)$an_item)->elems =  (rd_kafka_topic_partition_t*)$a_value
			]"
		ensure
			elems_set: a_value = c_elems (an_item)
		end

end
