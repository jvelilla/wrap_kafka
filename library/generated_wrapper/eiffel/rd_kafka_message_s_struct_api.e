note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RD_KAFKA_MESSAGE_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	err: INTEGER
			-- Access member `err`
		require
			exists: exists
		do
			Result := c_err (item)
		ensure
			result_correct: Result = c_err (item)
		end

	set_err (a_value: INTEGER) 
			-- Change the value of member `err` to `a_value`.
		require
			exists: exists
		do
			set_c_err (item, a_value)
		ensure
			err_set: a_value = err
		end

	rkt: detachable RD_KAFKA_TOPIC_S_STRUCT_API 
			-- Access member `rkt`
		require
			exists: exists
		do
			if attached c_rkt (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_rkt (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_rkt (item) 
		end

	set_rkt (a_value: RD_KAFKA_TOPIC_S_STRUCT_API) 
			-- Set member `rkt`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_rkt (item, a_value.item)
		ensure
			rkt_set: attached rkt as l_value implies l_value.item = a_value.item
		end

	partition: INTEGER
			-- Access member `partition`
		require
			exists: exists
		do
			Result := c_partition (item)
		ensure
			result_correct: Result = c_partition (item)
		end

	set_partition (a_value: INTEGER) 
			-- Change the value of member `partition` to `a_value`.
		require
			exists: exists
		do
			set_c_partition (item, a_value)
		ensure
			partition_set: a_value = partition
		end

	payload: POINTER
			-- Access member `payload`
		require
			exists: exists
		do
			Result := c_payload (item)
		ensure
			result_correct: Result = c_payload (item)
		end

	set_payload (a_value: POINTER) 
			-- Change the value of member `payload` to `a_value`.
		require
			exists: exists
		do
			set_c_payload (item, a_value)
		ensure
			payload_set: a_value = payload
		end

	len: NATURAL
			-- Access member `len`
		require
			exists: exists
		do
			Result := c_len (item)
		ensure
			result_correct: Result = c_len (item)
		end

	set_len (a_value: NATURAL) 
			-- Change the value of member `len` to `a_value`.
		require
			exists: exists
		do
			set_c_len (item, a_value)
		ensure
			len_set: a_value = len
		end

	key: POINTER
			-- Access member `key`
		require
			exists: exists
		do
			Result := c_key (item)
		ensure
			result_correct: Result = c_key (item)
		end

	set_key (a_value: POINTER) 
			-- Change the value of member `key` to `a_value`.
		require
			exists: exists
		do
			set_c_key (item, a_value)
		ensure
			key_set: a_value = key
		end

	key_len: NATURAL
			-- Access member `key_len`
		require
			exists: exists
		do
			Result := c_key_len (item)
		ensure
			result_correct: Result = c_key_len (item)
		end

	set_key_len (a_value: NATURAL) 
			-- Change the value of member `key_len` to `a_value`.
		require
			exists: exists
		do
			set_c_key_len (item, a_value)
		ensure
			key_len_set: a_value = key_len
		end

	offset: INTEGER_64
			-- Access member `offset`
		require
			exists: exists
		do
			Result := c_offset (item)
		ensure
			result_correct: Result = c_offset (item)
		end

	set_offset (a_value: INTEGER_64) 
			-- Change the value of member `offset` to `a_value`.
		require
			exists: exists
		do
			set_c_offset (item, a_value)
		ensure
			offset_set: a_value = offset
		end

	private: POINTER
			-- Access member `_private`
		require
			exists: exists
		do
			Result := c_private (item)
		ensure
			result_correct: Result = c_private (item)
		end

	set_private (a_value: POINTER) 
			-- Change the value of member `_private` to `a_value`.
		require
			exists: exists
		do
			set_c_private (item, a_value)
		ensure
			private_set: a_value = private
		end

feature {NONE} -- Implementation wrapper for struct struct rd_kafka_message_s

	sizeof_external: INTEGER 
		external
			"C inline use <rdkafka.h>"
		alias
			"sizeof(struct rd_kafka_message_s)"
		end

	c_err (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->err
			]"
		end

	set_c_err (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->err =  (rd_kafka_resp_err_t)$a_value
			]"
		ensure
			err_set: a_value = c_err (an_item)
		end

	c_rkt (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->rkt
			]"
		end

	set_c_rkt (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->rkt =  (rd_kafka_topic_t*)$a_value
			]"
		ensure
			rkt_set: a_value = c_rkt (an_item)
		end

	c_partition (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->partition
			]"
		end

	set_c_partition (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->partition =  (int32_t)$a_value
			]"
		ensure
			partition_set: a_value = c_partition (an_item)
		end

	c_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->payload
			]"
		end

	set_c_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->payload =  (void*)$a_value
			]"
		ensure
			payload_set: a_value = c_payload (an_item)
		end

	c_len (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->len
			]"
		end

	set_c_len (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->len =  (size_t)$a_value
			]"
		ensure
			len_set: a_value = c_len (an_item)
		end

	c_key (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->key
			]"
		end

	set_c_key (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->key =  (void*)$a_value
			]"
		ensure
			key_set: a_value = c_key (an_item)
		end

	c_key_len (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->key_len
			]"
		end

	set_c_key_len (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->key_len =  (size_t)$a_value
			]"
		ensure
			key_len_set: a_value = c_key_len (an_item)
		end

	c_offset (an_item: POINTER): INTEGER_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->offset
			]"
		end

	set_c_offset (an_item: POINTER; a_value: INTEGER_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->offset =  (int64_t)$a_value
			]"
		ensure
			offset_set: a_value = c_offset (an_item)
		end

	c_private (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->_private
			]"
		end

	set_c_private (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_message_s*)$an_item)->_private =  (void*)$a_value
			]"
		ensure
			private_set: a_value = c_private (an_item)
		end

end
