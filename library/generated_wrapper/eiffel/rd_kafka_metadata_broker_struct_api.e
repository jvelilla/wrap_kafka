note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class RD_KAFKA_METADATA_BROKER_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	id: INTEGER
			-- Access member `id`
		require
			exists: exists
		do
			Result := c_id (item)
		ensure
			result_correct: Result = c_id (item)
		end

	set_id (a_value: INTEGER) 
			-- Change the value of member `id` to `a_value`.
		require
			exists: exists
		do
			set_c_id (item, a_value)
		ensure
			id_set: a_value = id
		end

	host:  detachable C_STRING
			-- Access member `host`
		require
			exists: exists
		do
			if attached c_host (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_host (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_host (a_value: C_STRING) 
			-- Change the value of member `host` to `a_value`.
		require
			exists: exists
		do
			set_c_host (item, a_value.item )
		end

	port: INTEGER
			-- Access member `port`
		require
			exists: exists
		do
			Result := c_port (item)
		ensure
			result_correct: Result = c_port (item)
		end

	set_port (a_value: INTEGER) 
			-- Change the value of member `port` to `a_value`.
		require
			exists: exists
		do
			set_c_port (item, a_value)
		ensure
			port_set: a_value = port
		end

feature {NONE} -- Implementation wrapper for struct struct rd_kafka_metadata_broker

	sizeof_external: INTEGER 
		external
			"C inline use <rdkafka.h>"
		alias
			"sizeof(struct rd_kafka_metadata_broker)"
		end

	c_id (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->id
			]"
		end

	set_c_id (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->id =  (int32_t)$a_value
			]"
		ensure
			id_set: a_value = c_id (an_item)
		end

	c_host (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->host
			]"
		end

	set_c_host (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->host =  (char*)$a_value
			]"
		ensure
			host_set: a_value = c_host (an_item)
		end

	c_port (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->port
			]"
		end

	set_c_port (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <rdkafka.h>"
		alias
			"[
				((struct rd_kafka_metadata_broker*)$an_item)->port =  (int)$a_value
			]"
		ensure
			port_set: a_value = c_port (an_item)
		end

end
